'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var LOCALIZATION = {
    justNow: 'just now',
    seconds: 'second',
    minutes: 'minute',
    hours: 'hour',
    days: [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday'
    ],
    months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ],
    meridians: ['am', 'pm']
};

function Formatter(locale, dateValue, format) {
    var months = locale.months, days = locale.days, meridians = locale.meridians;
    var date = new Date(dateValue);
    var regexp = /(Y+)|(M+)|(D+)|(d+)|(h+)|(m+)|(s+)|(a+)|(A+)/g;
    var replaceKeys = replacer(date, months, days, meridians);
    var matches = format.match(regexp) || [];
    var replaced = {};
    var deducedFormat = matches
        .reduce(function (acc, key, index) {
        replaced[acc.indexOf(key) + index] = replaceKeys(key);
        return acc.replace(key, '');
    }, format)
        .split('');
    Object.entries(replaced).forEach(function (_a) {
        var index = _a[0], value = _a[1];
        deducedFormat.splice(parseInt(index, 10), 0, value);
    });
    return deducedFormat.join('');
}
function replacer(date, months, days, meridian) {
    return function (key) {
        switch (key) {
            case 'D': {
                return date.getDate().toString();
            }
            case 'DD': {
                return leadingZeros(date.getDate());
            }
            case 'd': {
                return days[date.getDate()].charAt(0);
            }
            case 'dd': {
                return days[date.getDate()].substr(0, 2);
            }
            case 'ddd': {
                return days[date.getDay()].substr(0, 3);
            }
            case 'dddd': {
                return days[date.getDay()];
            }
            case 'M': {
                return date.getMonth().toString();
            }
            case 'MM': {
                return leadingZeros(date.getMonth());
            }
            case 'MMM': {
                return months[date.getMonth()].substr(0, 3);
            }
            case 'MMMM': {
                return months[date.getMonth()];
            }
            case 'YY': {
                return date
                    .getFullYear()
                    .toString()
                    .substring(2);
            }
            case 'YYY': {
                return "'" + date
                    .getFullYear()
                    .toString()
                    .substring(2);
            }
            case 'YYYY': {
                return date.getFullYear().toString();
            }
            case 'H': {
                return date.getHours().toString();
            }
            case 'HH': {
                return leadingZeros(date.getHours());
            }
            case 'h': {
                return getTwelveHours(date.getHours());
            }
            case 'hh': {
                return leadingZeros(getTwelveHours(date.getHours()));
            }
            case 'm': {
                return date.getMinutes();
            }
            case 'mm': {
                return leadingZeros(date.getMinutes());
            }
            case 's': {
                return date.getSeconds();
            }
            case 'ss': {
                return leadingZeros(date.getSeconds());
            }
            case 'a': {
                return getMeridian(date, meridian, false);
            }
            case 'A': {
                return getMeridian(date, meridian, true);
            }
            default: {
                return key;
            }
        }
    };
}
function leadingZeros(value) {
    return value < 10 ? "0" + value : value.toString();
}
function getTwelveHours(value) {
    if (value < 12) {
        return value + 1;
    }
    if (value > 12) {
        return value - 12;
    }
    return value;
}
function getMeridian(date, meridians, isCaps) {
    var value = date.getHours() < 12 ? meridians[0] : meridians[1];
    return isCaps ? value.toUpperCase() : value.toLowerCase();
}

var FORMAT = 'isoDateTime';
var TimeValues = {
    SECOND: 1000,
    MINUTE: 60 * 1000,
    HOUR: 60 * 60 * 1000,
    DAY: 24 * 60 * 60 * 1000
};
var StateValues = {
    FRESH: 'fresh',
    PER_SECOND: 'psec',
    PER_MINUTE: 'pmin',
    PER_HOUR: 'phr',
    STATIC: 'static'
};

function getStatusFromTime(diff, showSeconds) {
    if (diff >= TimeValues.DAY) {
        return StateValues.STATIC;
    }
    if (diff >= TimeValues.HOUR) {
        return StateValues.PER_HOUR;
    }
    if (diff >= TimeValues.MINUTE) {
        return StateValues.PER_MINUTE;
    }
    return showSeconds ? StateValues.PER_SECOND : StateValues.FRESH;
}
function getTimeoutFromStatus(status) {
    switch (status) {
        default:
        case StateValues.PER_MINUTE: {
            return TimeValues.MINUTE;
        }
        case StateValues.PER_SECOND: {
            return TimeValues.SECOND;
        }
        case StateValues.PER_HOUR: {
            return TimeValues.HOUR;
        }
    }
}
function getCoefficientFromTime(status, diff) {
    var dayDiff = diff % TimeValues.DAY;
    switch (status) {
        default:
        case StateValues.FRESH: {
            return 0;
        }
        case StateValues.PER_SECOND: {
            return Math.floor(((dayDiff % TimeValues.HOUR) % TimeValues.MINUTE) / TimeValues.SECOND);
        }
        case StateValues.PER_MINUTE: {
            return Math.floor((dayDiff % TimeValues.HOUR) / TimeValues.MINUTE);
        }
        case StateValues.PER_HOUR: {
            return Math.floor(dayDiff / TimeValues.HOUR);
        }
    }
}
function textSetter(formatter, prefix, suffix, locale) {
    return function (diff, time, status, format) {
        var coeff = getCoefficientFromTime(status, diff);
        var pluralize = pluralizer(prefix, suffix);
        switch (status) {
            default:
            case StateValues.FRESH: {
                return locale.justNow;
            }
            case StateValues.PER_SECOND: {
                return pluralize(coeff, locale.seconds);
            }
            case StateValues.PER_MINUTE: {
                return pluralize(coeff, locale.minutes);
            }
            case StateValues.PER_HOUR: {
                return pluralize(coeff, locale.hours);
            }
            case StateValues.STATIC: {
                return formatter(locale, time, format);
            }
        }
    };
}
function timeValueSetter(time) {
    try {
        return new Date(time).getTime();
    }
    catch (e) {
        throw new Error(e);
    }
}
function diffSetter(time) {
    var timeValue = timeValueSetter(time);
    return Date.now() - timeValue;
}
function pluralizer(prefix, suffix) {
    if (prefix === void 0) { prefix = ''; }
    if (suffix === void 0) { suffix = ''; }
    return function (value, text) {
        return [prefix, value, value === 1 ? text : text + 's', suffix].join(' ');
    };
}

function ReactLiveTime(props) {
    var time = props.time, _a = props.format, format = _a === void 0 ? FORMAT : _a, _b = props.showSeconds, showSeconds = _b === void 0 ? false : _b, renderer = props.renderer, id = props.id, className = props.className, style = props.style, prefix = props.prefix, suffix = props.suffix;
    var setCompText = textSetter(Formatter, prefix || ReactLiveTime.prefix, suffix || ReactLiveTime.suffix, ReactLiveTime.localization || LOCALIZATION);
    var _c = React.useState(diffSetter(time)), diff = _c[0], setDiff = _c[1];
    var _d = React.useState(getStatusFromTime(diff)), status = _d[0], setStatus = _d[1];
    var _e = React.useState(setCompText(diff, time, status, format)), text = _e[0], setText = _e[1];
    React.useEffect(function () { return setDiff(diffSetter(time)); }, [time, showSeconds]);
    React.useEffect(function () { return setStatus(getStatusFromTime(diff, showSeconds)); }, [
        diff,
        showSeconds
    ]);
    React.useEffect(function () {
        setText(setCompText(diff, time, status, format));
    }, [status, diff, format]);
    React.useEffect(function () {
        var timer = setTimeout(function () {
            setDiff(diffSetter(time));
        }, getTimeoutFromStatus(status));
        return function () { return clearTimeout(timer); };
    }, [diff]);
    return renderer ? (renderer({ time: time, status: status, diff: diff, format: format, text: text })) : (React__default.createElement("span", { id: id, className: className, style: style }, text));
}
(function (ReactLiveTime) {
    ReactLiveTime.localization = LOCALIZATION;
    ReactLiveTime.prefix = '';
    ReactLiveTime.suffix = '';
})(ReactLiveTime || (ReactLiveTime = {}));
function setLocale(locale) {
    ReactLiveTime.localization = __assign({}, LOCALIZATION, locale);
}
var ReactLiveTime$1 = ReactLiveTime;

exports.setLocale = setLocale;
exports.default = ReactLiveTime$1;
//# sourceMappingURL=index.js.map
